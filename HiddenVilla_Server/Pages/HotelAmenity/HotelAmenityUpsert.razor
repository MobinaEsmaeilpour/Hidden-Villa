@page "/hotel-amenity/create"
@page "/hotel-amenity/edit/{Id:int}"
@using Models
@using Business.Repository.IRepositpry
@inject IHotelAmenityRepository HotelAmenityRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@attribute [Authorize]

<div class="row mt-2 mb-5">

    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Amenity</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelAmenityModel" OnValidSubmit="HandleHotelAmenityUpsert">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <lable>Name</lable>
                        <InputText @bind-Value="HotelAmenityModel.Name" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.Name"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <lable>Description</lable>
                        <InputTextArea @bind-Value="HotelAmenityModel.Description" class="form-control"></InputTextArea>
                    </div>

                    <div class="form-group">
                        <lable>Timming</lable>
                    <InputText @bind-Value="HotelAmenityModel.Timming" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.Timming"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <lable>IconStyle</lable>
                        <InputText @bind-Value="HotelAmenityModel.IconStyle" class="form-control"></InputText>
                        <ValidationMessage For="()=>HotelAmenityModel.IconStyle"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-primary">@Title amenity</button>
                        <NavLink href="hotel-amenity" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelAmenityDTO HotelAmenityModel {get; set;} = new HotelAmenityDTO();
    private string Title { get; set; } = "Create";
    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update";
            HotelAmenityModel = await HotelAmenityRepository.GetHotelAmenity(Id.Value);
          
        }
        else
        {
            //create
            HotelAmenityModel = new HotelAmenityDTO();
        }
    }
    private async Task HandleHotelAmenityUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelAmenityRepository.IsAmenityUnique(HotelAmenityModel.Name, HotelAmenityModel.Id);
            if (roomDetailsByName != null)
            {
                await JsRuntime.ToasterError("Room name already exists.");
                return;
            }
            if (HotelAmenityModel.Id != 0 && Title == "Update")
            {
                //update
                var updateRoomResualt = await HotelAmenityRepository.UpdateHotelAmenity(HotelAmenityModel.Id, HotelAmenityModel);
                await JsRuntime.ToasterSuccess("Hotel room updated successfuly.");
            }
            else
            {
                //create
                var createdResult = await HotelAmenityRepository.CreateHotelAmenity(HotelAmenityModel);
                await JsRuntime.ToasterSuccess("Hotel room created successfuly.");
            }


        }
        catch (Exception ex)
        {
            // log exception

        }
        NavigationManager.NavigateTo("hotel-amenity");
    }

}
