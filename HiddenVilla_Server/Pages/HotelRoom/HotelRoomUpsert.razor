@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using Models
@using Business.Repository.IRepositpry
@inject IHotelRoomRepository HotelRoomRepository
@inject IHotelImageRepository HotelImagesRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IFileUpload FileUpload

<div class="row mt-2 mb-5">

    <h3 class="card-title text-info mb-3 ml-3">@Title Hotel Room</h3>
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <EditForm Model="HotelRoomModel" OnValidSubmit="HandleHotelRoomUpsert">
                    <DataAnnotationsValidator/>
                    @* <ValidationSummary/> *@
                    <div class="form-group">
                        <lable>Name</lable>
                        <InputText @bind-Value="HotelRoomModel.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>HotelRoomModel.Name"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <lable>Occupancy</lable>
                        <InputNumber @bind-Value="HotelRoomModel.Occupancy" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.Occupancy"></ValidationMessage>
                    </div>
                      
                    <div class="form-group">
                        <lable>Rate</lable>
                        <InputNumber @bind-Value="HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                        <ValidationMessage For="()=>HotelRoomModel.RegularRate"></ValidationMessage>
                    </div>

                    <div class="form-group">
                        <lable>SqFt</lable>
                        <InputText @bind-Value="HotelRoomModel.SqFt" class="form-control"></InputText>
                    </div>

                    <div class="form-group">
                        <lable>Details</lable>
                        <InputTextArea @bind-Value="HotelRoomModel.Detail" class="form-control"></InputTextArea>
                    </div>

                    <div class="form-group">
                        <InputFile OnChange="HandleImageUpload" multiple></InputFile>
                        <div class="row">
                            @if(HotelRoomModel.ImageUrls!=null && HotelRoomModel.ImageUrls.Count > 0)
                            {
                                int serial = 1;
                                foreach(var roomImage in HotelRoomModel.ImageUrls)
                                {
                                    <div class="col-md-2 mt-3">
                                        <div class="room-image" style="background: url('@roomImage') 50% 50%;">
                                            <span class="room-image-title">@serial</span>
                                        </div>
                                        <button type="button" class="btn btn-outline-danger btn-block mt-4">
                                            Delete
                                        </button>
                                    </div>
                                    serial++;
                                }
                            }
                        </div>
                    </div>

                    <div class="form-group">
                        <button class="btn btn-primary">@Title Room</button>
                        <NavLink href="hotrl-room" class="btn btn-secondary">Back to Index</NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }
    private HotelRoomDTO HotelRoomModel { get; set; } = new HotelRoomDTO();
    private string Title { get; set; } = "Create";
    private HotelRoomImageDTO RoomImage { get; set; } = new HotelRoomImageDTO();   
    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //updating
            Title = "Update";
            HotelRoomModel =  await HotelRoomRepository.GetHotelRoom(Id.Value);
            if (HotelRoomModel?.HotelRoomImages != null)
            {
                HotelRoomModel.ImageUrls = HotelRoomModel.HotelRoomImages.Select(u => u.RoomImageUrl).ToList();
            }
        }
        else
        {
            //create
            HotelRoomModel = new HotelRoomDTO();
        }
    }
    private async Task HandleHotelRoomUpsert()
    {
        try
        {
            var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name, HotelRoomModel.Id);
            if (roomDetailsByName != null)
            {
                await JsRuntime.ToasterError("Room name already exists.");
                return;
            }

            if (HotelRoomModel.Id != 0 && Title == "Update")
            {
                //update
                var updateRoomResualt = await HotelRoomRepository.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
                await JsRuntime.ToasterSuccess("Hotel room updated successfuly.");
            }
            else
            {
                //create
                var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
                await AddHotelRoomImage(createdResult);
                await JsRuntime.ToasterSuccess("Hotel room created successfuly.");
            }


        }
        catch(Exception ex)
        {
            // log exception

        }

        //var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
        NavigationManager.NavigateTo("hotel-room");
    }

    // private async Task HandelHotelRoomUpset()
    // {

    //     var roomDetailsByName = await HotelRoomRepository.IsRoomUnique(HotelRoomModel.Name);
    //     if(roomDetailsByName != null)
    //     {
    //          //there is duplicate room show error
    //          return;
    //     }
    //     var createdResult = await HotelRoomRepository.CreateHotelRoom(HotelRoomModel);
    //     NavigationManager.NavigateTo("hotel-room");
    // }
    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<String>();
            if (e.GetMultipleFiles().Count > 0)//agar bozorg tar az 0 bod be in mani ke file ha upload shodan
            {
                foreach (var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(file.Name);//mitavanim pasvand ra bazyabi konim va motmaen shavim fili ke upload mishavad faghad tasvir ast 
                    if (fileInfo.Extension.ToLower() == ".jpg" ||
                        fileInfo.Extension.ToLower() == ".png" ||
                        fileInfo.Extension.ToLower() == ".jpeg")
                    {
                        var uploadImagePatgh = await FileUpload.UploadFile(file);
                        images.Add(uploadImagePatgh);
                    }

                    else
                    {
                        await JsRuntime.ToasterError("Please select .jpg/.jpeg/.png file only");
                        return;
                    }
                }
                if (images.Any())
                {
                    if (HotelRoomModel.ImageUrls != null && HotelRoomModel.ImageUrls.Any())//This means that there is already an image inside this list
                    {
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImageUrls = new List<string>();
                        HotelRoomModel.ImageUrls.AddRange(images);
                    }
                }

                else
                {
                    await JsRuntime.ToasterError("Image uploading failed");
                    return;
                }
            }
        }
        catch(Exception ex)
        {   
            await JsRuntime.ToasterError(ex.Message);
        }
    }

    private async Task AddHotelRoomImage(HotelRoomDTO roomDetails)
    {
        foreach(var imageUrl in HotelRoomModel.ImageUrls)
        {
            //Model of Image
            RoomImage = new HotelRoomImageDTO()
            {
                RoomId = roomDetails.Id,
                RoomImageUrl = imageUrl
            };
            await HotelImagesRepository.CreateHotelRoomImage(RoomImage);
        }

    }
}
